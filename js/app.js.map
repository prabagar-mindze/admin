{"version":3,"sources":["app/app.js","app/application.js","app/config.js","app/controllers.js","app/directives.js","app/routes.js","app/services.js"],"names":[],"mappingsvRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvlrxfile":"public/js/app.js","sourcesContent":["'use strict';\n\nvar oneHpApp = angular.module('oneHpApp', [\n  'ui.router',\n  'ngCordova',\n  'oneHpControllers',\n  'oneHpServices',\n  'angular-svg-round-progress'\n]);\n\n//http://stackoverflow.com/questions/14070285/how-to-implement-history-back-in-angular-js\noneHpApp.directive('back', ['$window', function($window) {\n        return {\n            restrict: 'A',\n            link: function (scope, elem, attrs) {\n                elem.bind('click', function () {\n                    $window.history.back();\n                });\n            }\n        };\n    }]);\n\n/*\n * Sets the app version in the headers\n */\noneHpApp.factory('oneHealthInterceptor', ['$q', '$rootScope', 'authService',\n  function($q, $rootScope, authService) {\n    return {\n      'request': function(request) {\n        request.headers.token = authService.getToken();\n        console.log(request);\n        return request;\n      },\n      'response': function(response) {\n        console.log(response);\n        return response;\n      },\n      'responseError' : function (rejection) {\n        console.log (rejection);\n        switch (rejection.status) {\n          case 200:\n          case 201:\n          case 304:\n            break;\n          case 0:\n            $rootScope.$broadcast (\"slowNetwork\", \"network\");\n            break;\n          case 500:\n          case 501:\n          case 404:\n            $rootScope.$broadcast (\"slowNetwork\", \"server\");\n            break;\n        }\n        return $q.reject(rejection);\n      }\n    };\n  }]);\n\noneHpApp.factory('timeoutHttpIntercept', function ($rootScope, $q) {\n    return {\n      'request': function(config) {\n        config.timeout = 10000;\n        return config;\n      }\n    };\n });\n\noneHpApp.config(['$httpProvider', function ($httpProvider) {\n  $httpProvider.interceptors.push('oneHealthInterceptor');\n  $httpProvider.interceptors.push('timeoutHttpIntercept');\n}]);\n\n/*\n * Data persistance support using PouchDB\n */\noneHpApp.service('dbService', ['$q','$timeout',\n  function($q, $timeout) {\n    var dbname = \"oneHpClientDB\";\n\n    var set = function(key, value) {\n      var db = new PouchDB(dbname);\n      return $q.when(db.get(key)\n                     .then(function(response) {\n                       return db.put({_id: key,\n                                      _rev: response._rev,\n                                      value: value});\n          })\n               .catch(function(response) {\n           return db.put({_id: key,\n                                      value: value});\n         }));\n    };\n\n    var get = function(key) {\n      var db = new PouchDB(dbname);\n      return $q.when(db.get(key));\n    };\n\n    var remove = function(key) {\n      var db = new PouchDB(dbname, {auto_compaction: true});\n      db.get(key).then(function(doc) {\n        db.remove(doc);\n      }).catch(function(error) {\n        console.log(error);\n      });\n      return true;\n    };\n\n    return {set: set,\n            remove: remove,\n            get: get};\n  }]);\n\n/*\n * Store and retrieve auth cookie using the dbService\n */\noneHpApp.service('authService', ['$q', 'dbService',\n  function($q, dbService) {\n    var _token = null;\n    var deffered = $q.defer();\n\n    var getTokenFromStorage = function() {\n      dbService.get(\"token\").then(function(data) {\n         _token = data.value;\n         deffered.resolve(data.value);\n      }, function(error) {\n         deffered.reject(error);\n      });\n      return deffered.promise;\n    };\n\n    var getToken = function() {\n      return _token;\n    };\n\n    var setToken = function(token) {\n      dbService.set(\"token\", token);\n      _token = token;\n    };\n\n    var removeToken = function() {\n      dbService.remove(\"token\");\n      _token = null;\n    };\n\n    var isLoggedIn = function () {\n      if (_token != null)\n       return true;\n      return false;\n    };\n\n    return {isLoggedIn: isLoggedIn,\n            removeToken: removeToken,\n            getToken: getToken,\n            setToken: setToken,\n            getTokenFromStorage: getTokenFromStorage};\n  }\n]);\n\noneHpApp.run(function($rootScope) {\n  document.addEventListener(\"keyup\", function(e) {\n    if (e.keyCode === 27) {\n      $rootScope.$broadcast(\"escapePressed\", e.target);\n    }\n  });\n\n  document.addEventListener(\"click\", function(e) {\n    $rootScope.$broadcast(\"documentClicked\", e.target);\n  });\n});\n\n/*\n * This function will be called using $injector.invoke() when it is\n * passed as an argument to resolve in ui-router configuration.\n *\n * Redirect to the login page if the user is not logged in.\n */\nfunction isLoggedIn($q, $state, $location, authService)\n{\n  var deffered = $q.defer();\n  if (authService.isLoggedIn()) {\n    deffered.resolve();\n  } else {\n    authService.getTokenFromStorage().then(function (data) {\n      deffered.resolve();\n    }).catch (function(error) {\n      $location.path ('/login');\n    });\n  }\n  return deffered.promise;\n}\n\n\noneHpApp.run(function($rootScope, $sce, localeMessages) {\n  $rootScope.gMsgs = localeMessages.query();\n  $rootScope.saneHTML = function(string) {\n    return $sce.trustAsHtml(string);\n  };\n\n  var app = document.URL.indexOf( 'http://' ) === -1 && document.URL.indexOf( 'https://' ) === -1;\n  if (app) {\n    $rootScope.gIsBrowser = true;\n  } else {\n    $rootScope.gIsBrowser = false;\n  }\n});\n\n\noneHpApp.controller('AppMainCtrl', [\n  '$scope', '$rootScope', 'ModalService', '$timeout',\n  function ($scope, $rootScope, ModalService, $timeout) {\n\n    $scope.slowNetworkStatus = false;\n    $scope.checkingNow = false;\n\n    $rootScope.$on(\"slowNetwork\", function(event, reason) {\n      $scope.slowNetworkStatus = true;\n      $scope.reason = reason;\n    });\n\n    $scope.$watch('slowNetworkStatus', function(newValue, oldValue, scope) {\n\n      if ($scope.slowNetworkStatus == false)\n        return;\n      if (newValue == oldValue)\n        return;\n\n      ModalService.showModal({\n        templateUrl: \"partials/slownetwork.html\",\n        controller: \"SlowNetworkController\",\n        inputs: {reason: $scope.reason}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n          $scope.modal = false;\n          $scope.slowNetworkStatus = false;\n        });\n      });\n\n    });\n\n  }]);\n\noneHpApp.controller('SlowNetworkController', [\n  \"$scope\", \"close\", \"reason\", \"Profile\", \"$timeout\", \"$state\",\n  function ($scope, close, reason, Profile, $timeout, $state) {\n    $scope.reason = reason;\n    $scope.close = function() {\n      close();\n    };\n\n    $scope.tryagain = function() {\n      $scope.checkingNow = true;\n\n      Profile.getProfile().$promise\n                  .then(function(data) {\n                    $scope.checkingNow = false;\n                    close();\n                    $state.go($state.current, {}, {reload: true, location: \"replace\"}); \n                  })\n                  .catch(function(data) {\n                    $timeout(function() {$scope.checkingNow = false;}, 1500);\n                  });\n    };\n  }]);\n\noneHpApp.filter('sprintf', function() {\n    function parse(str) {\n        var args = [].slice.call(arguments, 1),\n            i = 0;\n\n        return str.replace(/%s/g, function() {\n            return args[i++];\n        });\n    }\n\n    return function(str) {\n        return parse(str, arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n    };\n});\n","\"use strict\";\n\nvar app = {\n    init: function init() {\n        console.log('Binding evnets...');\n        this.bindEvents();\n    },\n    // Bind Event Listeners\n    //\n    // Bind any events that are required on startup. Common events are:\n    // 'load', 'deviceready', 'offline', and 'online'.\n    bindEvents: function() {\n        console.log(\"bind events\");\n        document.addEventListener('deviceready', this.onDeviceReady, false);\n    },\n    // deviceready Event Handler\n    //\n    // The scope of 'this' is the event. In order to call the 'receivedEvent'\n    // function, we must explicitly call 'app.receivedEvent(...);'\n    onDeviceReady: function() {\n        app.receivedEvent('deviceready');\n        document.addEventListener(\"backbutton\", function(e) {\n           var loc = window.location.href;\n           if (loc.indexOf('#/dashboard')  > -1|| loc.indexOf('#/login') > -1) {\n               e.preventDefault();\n               navigator.app.exitApp();\n           }\n           else {\n               navigator.app.backHistory();\n           }\n        }, false);\n\n        if (true) { //device.platform == 'iOS') {\n          //http://stackoverflow.com/questions/26784118/scrolling-on-ios-device-finger-input-tag/28862015#28862015\n          document.addEventListener('DOMContentLoaded', function() {\n              setTextareaPointerEvents('none');\n          });\n          document.addEventListener('touchstart', function() {\n              setTextareaPointerEvents('auto');\n          });\n          document.addEventListener('touchmove', function(e) {\n              //e.preventDefault();\n              setTextareaPointerEvents('none');\n          });\n          document.addEventListener('touchend', function() {\n              setTimeout(function() {\n                  setTextareaPointerEvents('none');\n              }, 0);\n          });\n        }\n\n    },\n    // Update DOM on a Received Event\n    receivedEvent: function(id) {\n        // var parentElement = document.getElementById(id);\n        // var listeningElement = parentElement.querySelector('.listening');\n        // var receivedElement = parentElement.querySelector('.received');\n\n        // listeningElement.setAttribute('style', 'display:none;');\n        // receivedElement.setAttribute('style', 'display:block;');\n    }\n};\n\nfunction setTextareaPointerEvents(value) {\n    var nodes = document.getElementsByTagName('input');\n    for(var i = 0; i < nodes.length; i++) {\n        nodes[i].style.pointerEvents = value;\n    }\n}\n\n//module.exports = app;\n","/*\n * Rename this file to config.js and update serverUrl appropriately\n */\n\nvar serverUrl = \"http://p.1hf.co:30002\";\n","/* Controllers */\n\nvar oneHpControllers = angular.module('oneHpControllers', ['angularModalService']);\n\nfunction getToday() {\n  var today = new Date();\n  // Set the time to start of day\n  today.setSeconds(0); today.setMinutes(0); today.setHours(0);\n  var start = new Date(today);\n  today.setSeconds(59); today.setMinutes(59); today.setHours(23);\n  var end = new Date(today);\n\n  return {start: start.toISOString(), end: end.toISOString()};\n}\n\nfunction getCurrentMonth() {\n   var date = new Date();\n   var firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n   var lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n   return {firstDay: firstDay.toISOString(), lastDay: lastDay.toISOString()};\n}\n\noneHpControllers.controller('SplashCtrl', [\n  '$scope', '$state', '$location', '$stateParams', 'authService', '$timeout',\n  function($scope, $state, $location, $stateParams, authService, $timeout) {\n    $scope.onLoad = function () {\n\n      var splashHoldTime = 1500;\n\n      if (authService.isLoggedIn()) {\n        $timeout(function(){$state.go ('dashboard');}, splashHoldTime);\n        return;\n      }\n\n    authService.getTokenFromStorage().then(function (data) {\n      var redirect = $stateParams.redirect;\n      if (typeof redirect === 'undefined') {\n        $timeout(function(){$state.go('dashboard');}, splashHoldTime);\n      } else {\n        $timeout(function(){$location.path(redirect);}, splashHoldTime);\n      }\n    }).catch(function(error) {\n        $timeout(function(){$state.go ('login');}, splashHoldTime);\n      });\n    };\n  }\n]);\n\n\noneHpControllers.controller('DashboardCtrl', ['$scope', '$state',\n  'ModalService', 'Event','$rootScope','LoginServices', 'authService',\n  function($scope, $state, ModalService, Event, $rootScope, LoginServices,\n           authService) {\n    var today = getToday();\n\n    Event.getEvents({start: today.start, end: today.end})\n      .$promise.then(function(data) {\n        $scope.events = data;\n        // Compute the completed percentage\n        $scope.completed = data.filter(function(e) {\n          if (e.status === 'complete') return true;\n          else return false;\n        }).length;\n        if (data.length > 0) $scope.percentComplete = parseInt(($scope.completed/data.length)*100);\n        else $scope.percentComplete = 0;\n      });\n\n    $scope.notifications = [\n      {\n          \"type\": \"emergency\",\n          \"message\": \"Patient X admitted\",\n          \"read\": false,\n          \"date\": \"2015-09-03T11:00:00Z\"\n      },\n      {\n          \"type\": \"ad\",\n          \"message\": \"buy our tablets, tonics for a discount\",\n          \"read\": false,\n          \"date\": \"2015-09-03T11:00:00Z\"\n      }\n    ];\n\n    // TODO: Use Array.prototype.filter\n    $scope.notificationsUnread = [];\n    angular.forEach($scope.notifications, function(value, key) {\n      if (!value.read) {\n        $scope.notificationsUnread.push(value);\n      }\n    });\n\n  }]);\n\n\noneHpControllers.controller('LoginCtrl', [\n  '$scope', '$state', 'Login', 'authService','$timeout','countryCode','$rootScope',\n  function($scope, $state, Login, authService, $timeout, countryCode, $rootScope) {\n    // These variables holds the error messages from the form.\n    $scope.otpError = \"\";\n    $scope.signIn = \"\";\n    // Set these variables to toggle view of the two forms, OTP and login.\n    $scope.showLogin = true;\n    $scope.showOtp = false;\n    // Set this variable to switch messages about OTP and call.\n    $scope.waitingForOtp = '';\n    var timeout_before_call = 60000;\n    $scope.countryCodes = countryCode.query();\n\n    // Call for OTP\n    var callForOTP = function() {\n      $scope.waitingForOtp = \"calling\";\n      Login.callToGetOTP({\"phoneNumber\": $scope.mobile.toString(),\n                          \"partnerId\": $scope.partnerId.toString(),\n                          \"countryCode\": $scope.countryCode});\n    };\n\n    $scope.getOtp = function() {\n      $scope.formSubmitted = true;\n      if ($scope.loginForm.$invalid) {\n        var elements = document.getElementsByClassName('ng-invalid');\n        angular.element(elements[1]).next().removeClass('validation-error'); //Show only one error.\n        elements[1].focus();\n        return;\n      }\n\n      $scope.showLogin = false;\n      $scope.showOtp = true;\n\n      Login.getAccessCode({\"phoneNumber\": $scope.mobile.toString(),\n                           \"countryCode\": $scope.countryCode,\n                           \"partnerId\": $scope.partnerId.toString()},\n                          function(data) {\n                            $scope.waitingForOtp = 'waiting';\n                            $scope.timerId = $timeout(callForOTP, timeout_before_call);\n                          },function(error) {\n                            if (error.data)\n                              $scope.otpError = error.data.message;\n                            $scope.showLogin = true;\n                            $scope.showOtp = false;\n                          });\n    };\n\n    $scope.signIn = function() {\n      $timeout.cancel($scope.timerId);\n      Login.validateOtp({\"phoneNumber\": $scope.mobile.toString(),\n                         \"countryCode\": $scope.countryCode,\n                         \"partnerId\": $scope.partnerId.toString(),\n                         \"otp\": $scope.otp.toString()},\n                        function(data) {\n                          // Set the authentication cookie\n                          authService.setToken(data.token);\n                          // Check for first login\n                          if (data.firstLogin === true) {\n                            $rootScope.firstLogin = true;\n                            $state.go('profile');\n                          } else {\n                            $rootScope.firstLogin = false;\n                            $state.go('dashboard');\n                          }\n                        },function(error) {\n                          if (error.data)\n                            $scope.signInError = error.data.message;\n                        });\n    };\n  }]);\n\n\noneHpControllers.controller('EventCtrl', ['$scope', '$state', 'ModalService', 'Event', 'oneHealthToast',\n  function($scope, $state, ModalService, Event, oneHealthToast) {\n\n    $scope.showEventDetails = function(e) {\n      console.log(e);\n      var countryCode = angular.isUndefined(e.countryCode) ? \"\" : e.countryCode;\n      var patient = {\n        countryCode: countryCode, phoneNumber: e.mobile,\n        name: e.name, sex: e.sex, age: e.age\n      };\n\n      if (e.status == 'cancelled') {\n        oneHealthToast.show($scope.gMsgs.cancelled_appointment_toast_message);\n        return;\n      }\n      if (e.status == 'noshow') {\n        oneHealthToast.show($scope.gMsgs.noshow_appointment_toast_message);\n        return;\n      }\n      if (e.status == 'complete') {\n        $state.go('patientrecordlist', {patient: patient});\n        return;\n      }\n\n      ModalService.showModal({\n        templateUrl: \"partials/event-details-modal.html\",\n        controller: \"EventDetailsCtrl\",\n        inputs: {event: e, patient: patient}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n          switch (result) {\n          case 'edit':\n            $scope.editEvent(e);\n            break;\n          case 'consultforms':\n            $state.go('patientrecordlist', {patient: patient});\n            break;\n          }\n        });\n      });\n    };\n\n    $scope.addEvent = function(date) {\n      ModalService.showModal({\n        templateUrl: \"partials/event.html\",\n        controller: \"AddEventCtrl\",\n        inputs: {date: date||moment()}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n          if (result) {\n            $scope.events.push(result);\n          }\n        });\n      });\n    };\n\n    $scope.editEvent = function(e) {\n      ModalService.showModal({\n        templateUrl: \"partials/event.html\",\n        controller: \"EditEventCtrl\",\n        inputs: {event: e}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n          if (result) {\n          }\n        });\n      });\n    };\n\n  }]);\n\n\noneHpControllers.controller('AddEventCtrl', ['$scope', '$filter', 'close',\n                                             'date', 'Event', 'countryCode', 'oneHealthToast',\n  function($scope, $filter, close, date, Event, countryCode, oneHealthToast) {\n    $scope.event = {};\n    $scope.countryCodes = countryCode.query();\n    $scope.day = date.clone().startOf('day');\n    // event.start needs to be a Date object (not moment)\n    $scope.event.start = date.clone().startOf('minute').toDate();\n\n    //Form variables with selected fields (select/radio), \n    //needs explict setting of their values to the default value.\n    $scope.event.duration = \"30\";\n    $scope.event.countryCode = \"91\";\n    $scope.event.type = \"outpatient\";\n    $scope.event.sex = \"male\";\n    $scope.event.location = \"Vikram Hospital\"; //TODO: Dangerous!!\n\n    $scope.add = function() {\n      $scope.formSubmitted = true;\n      if ($scope.eventForm.$invalid) {\n        var elements = document.getElementsByClassName('ng-invalid');\n        angular.element(elements[1]).next().removeClass('validation-error'); //Show only one error.\n        elements[1].focus();\n        return;\n      }\n\n      $scope.event.end = new Date($scope.event.start)\n                               .setMinutes($scope.event.start.getMinutes() + Number($scope.event.duration));\n\n      Event.add($scope.event,\n                function(data) {\n                  oneHealthToast.show($scope.gMsgs.new_event_toast_message);\n                  close(data);\n                },\n                function(error) {\n                  $scope.error = error.data.message;\n                  oneHealthToast.show($scope.error);\n                });\n    };\n    $scope.close = function() {\n      close(false);\n    };\n  }]);\n\n\noneHpControllers.controller('EditEventCtrl', ['$scope', '$filter', 'close',\n                                              'event', 'Event', 'countryCode', 'oneHealthToast',\n  function($scope, $filter, close, event, Event, countryCode, oneHealthToast) {\n    // TODO: Merge this controller with AddEventCtrl\n    $scope.event = event;\n    // event.start needs to be a Date object (not moment)\n    $scope.event.start = new Date($scope.event.start);\n    $scope.day = moment($scope.event.start);\n    $scope.countryCodes = countryCode.query();\n\n    $scope.update = function() {\n      $scope.event.end = new Date($scope.event.start)\n                               .setMinutes($scope.event.start.getMinutes() + Number($scope.event.duration));\n      Event.update($scope.event,\n                   function(data) {\n                     oneHealthToast.show('Appointment Updated');\n                     close(data);\n                   },\n                   function(error) {\n                     //$scope.error = error.data.message;\n                     oneHealthToast.show(error.data.message);\n                   });\n    };\n\n    $scope.close = function() {\n      close(true);\n    };\n  }]);\n\n\noneHpControllers.controller('EventDetailsCtrl', ['$scope', '$state', 'close', 'event', 'patient', 'Event',\n  function($scope, $state, close, event, patient, Event) {\n    $scope.event = event;\n    $scope.patient = patient;\n    $scope.selected = null;\n    // Success callback which updates the status of the event.\n    var updateStatus = function() {\n      $scope.event.status = $scope.selected;\n      // Send back the updated event\n      close();\n    };\n    $scope.confirm = function() {\n      // Update the event status after contacting the server.\n      var data = {'eventId': event.eventId};\n      switch ($scope.selected) {\n      case 'complete':\n        Event.complete(data, updateStatus);\n        $state.go('patientrecordlist', {patient: patient});\n        break;\n      case 'cancelled':\n        Event.cancel({eventIds: [event.eventId]}, updateStatus);\n        break;\n      case 'noshow':\n        Event.noshow(data, updateStatus);\n        break;\n      };\n    };\n    $scope.cancel = function() {\n      close();\n    };\n    $scope.edit = function() {\n      close('edit');\n    };\n    $scope.consultforms = function() {\n      close('consultforms');\n    };\n  }]);\n\n\noneHpControllers.controller('CalendarCtrl', ['$scope', 'ModalService', 'Event', 'oneHealthToast', '$filter',\n  function ($scope, ModalService, Event, oneHealthToast, $filter) {\n    'use strict';\n\n    $scope.addEvent = function(date) {\n      ModalService.showModal({\n          templateUrl: \"partials/event.html\",\n          controller: \"AddEventCtrl\",\n          inputs: {date: date}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n          if (result) {\n            $scope.events.push(result);\n            //Brute force update\n            $scope.loadSummary(date);\n          }\n        });\n      });\n    };\n\n    $scope.summary = [];\n    $scope.loadSummary = function(date) {\n      Event.summary({start: date.clone().startOf('month').toISOString(),\n                     end: date.clone().endOf('month').toISOString()},\n        function(data) {\n          angular.forEach(data, function(day) {\n            var dayOfMonth = moment(new Date(day.date)).format('D');\n            var monthIndex = moment(new Date(day.date)).format('M');\n            if (!this.hasOwnProperty(monthIndex))\n              this[monthIndex] = [];\n            this[monthIndex][dayOfMonth] = {hasEvents: day.available ? (day.count > 0 ? true : false) : false,\n                                blocked: day.available ? false : true};\n          }, $scope.summary);\n        });\n    };\n\n    $scope.events_arr = [];\n    $scope.loadEvents = function(date) {\n      $scope.events = null;\n      $scope.selectedDate = date;\n      var dayOfMonth = moment(new Date(date)).format('D');\n      var monthIndex = moment(new Date(date)).format('M');\n      if (!$scope.events_arr.hasOwnProperty(monthIndex))\n        $scope.events_arr[monthIndex] = [];\n      if ($scope.events_arr[monthIndex].hasOwnProperty(dayOfMonth))\n        $scope.events = $scope.events_arr[monthIndex][dayOfMonth];\n\n      var start = date.clone().startOf('day').toISOString();\n      var end = date.clone().endOf('day').toISOString();\n      Event.getEvents({start: start, end: end}).$promise.then(function(data) {\n        $scope.events = data;\n        $scope.events_arr[monthIndex][dayOfMonth] = data;\n      })\n    };\n\n    $scope.blockDay = function(date) {\n      Event.block({date: date.toISOString()}).$promise.then(function(data) {\n        oneHealthToast.show('Blocked');\n        var dayOfMonth = moment(new Date(date)).format('D');\n        var monthIndex = moment(new Date(date)).format('M');\n        $scope.summary[monthIndex][dayOfMonth].blocked = true;\n      });\n    };\n\n    $scope.unblockDay = function(date) {\n      Event.unblock({date: date.toISOString()}).$promise.then(function(data) {\n        var dayOfMonth = moment(new Date(date)).format('D');\n        var monthIndex = moment(new Date(date)).format('M');\n        $scope.summary[monthIndex][dayOfMonth].blocked = false;\n      });\n    };\n\n    $scope.cancelAll = function(date) {\n      var events = [];\n      angular.forEach($scope.events, function(e) {\n        events.push(e.eventId);\n      });\n      Event.cancel({eventIds: events}).$promise.then(function(data) {\n        oneHealthToast.show($filter('sprintf')($scope.gMsgs.post_cancel_all, \n                            moment(new Date(date)).format('D'), moment(new Date(date)).format('MMM')));\n      });\n    };\n\n  }]);\n\n\noneHpControllers.controller('UploadSourceCtrl', ['$scope', 'close',\n  function($scope, close) {\n    $scope.select = function(source) {\n      close(source);\n    };\n  }]);\n\n\noneHpControllers.controller('MenuCtrl', ['$scope', 'close',\n  function($scope, close) {\n    $scope.select = function(source) {\n      close(source);\n    };\n  }]);\n\n\noneHpControllers.controller('ProfileCtrl', [\n  '$scope', 'ModalService', 'Event','documentUploader','$rootScope','Profile','$state',\n  function($scope, ModalService, Event, documentUploader, $rootScope, Profile, $state) {\n    'use strict';\n\n    $scope.firstLogin = $rootScope.firstLogin;\n    $scope.p = Profile.getProfile(function(data) {\n      // dateOfBirth is a Date object\n      $scope.p.dateOfBirth = new Date(data.dateOfBirth);\n    });\n\n    $scope.getSource = function() {\n      ModalService.showModal({\n          templateUrl: \"partials/upload-source-modal.html\",\n          controller: \"UploadSourceCtrl\"\n      }).then(function(modal) {\n        modal.close.then(function(source) {\n          if (source) {\n            documentUploader.upload(source, {targetWidth: 100, targetHeight: 100})\n              .then(function(fhandler) {\n                $scope.p.avatar = fhandler.url;\n                $scope.p.$updateProfile().then(function(data){\n                  // TODO: Repetition!\n                  $scope.p.dateOfBirth = new Date(data.dateOfBirth);\n                });\n              },\n              function(error) {\n                // TODO: Find a place for this\n                $scope.uploadError = error;\n              });\n          }\n        });\n      });\n    };\n\n    $scope.save = function() {\n\n      $scope.formSubmitted = true;\n      if ($scope.profileForm.$invalid) {\n        var elements = document.getElementsByClassName('ng-invalid');\n        angular.element(elements[1]).next().removeClass('validation-error'); //Show only one error.\n        elements[1].focus();\n        return;\n      }\n\n      $scope.p.$updateProfile().then(function(data) {\n        // TODO: Go to the last page, it doesn't always come from dashboard\n        $state.go('dashboard');\n      },\n      function(error) {\n        $scope.formError = error.data.message;\n      });\n    };\n\n    $scope.skip = function() {\n      $state.go('dashboard');\n    };\n\n}]);\n\n\noneHpControllers.controller('LogoutCtrl', [\n  '$scope', '$state','LoginServices', 'authService','Login',\n  function($scope, $state, LoginServices, authService, Login) {\n\n    $scope.logout = function () {\n      LoginServices.logout(function(data) {\n        authService.removeToken();\n        $state.go('login');\n      });\n    };\n\n    $scope.logout();\n  }]);\n\n\noneHpControllers.controller('ConsultFormsListCtrl', [\n  '$scope', '$state', '$stateParams', 'ConsultFormsServices',\n  function($scope, $state, $stateParams, ConsultFormsServices) {\n\n    ConsultFormsServices.list().$promise.then(function(data){\n      $scope.cfs = data;\n    });\n\n    $scope.patient = $stateParams.patient;\n\n    console.log($scope.patient);\n\n    //This might not be needed at the moment as .list() returns the questions[] too.\n    //ConsultFormsServices.getForm({id: consultFormId})\n\n    $scope.ViewForm = function(cf) {\n      $state.go('consultformsfill', {cf: cf, patient: $scope.patient});\n    };\n\n  }]);\n\n\noneHpControllers.controller('ConsultFormsFillCtrl', [\n  '$scope', '$state', '$stateParams', 'ConsultFormsServices', 'countryCode', 'oneHealthToast',\n  function($scope, $state, $stateParams, ConsultFormsServices, countryCode, oneHealthToast) {\n\n    $scope.cf = $stateParams.cf;\n    $scope.patient = $stateParams.patient;\n    $scope.countryCodes = countryCode.query();\n\n    console.log($scope.patient);\n\n    if ($scope.cf == null) {\n      $state.go('patientslist');\n    }\n\n    if ($scope.patient == null) {\n      $scope.new_patient = true;\n      $scope.patient = {};\n      $scope.patient.sex = 'male';\n      $scope.patient.countryCode = \"91\";\n    } else {\n      $scope.new_patient = false;\n    }\n\n    $scope.saveForm = function(qna, patient) {\n      $scope.formSubmitted = true;\n      if ($scope.consultForm.$invalid) {\n        var elements = document.getElementsByClassName('ng-invalid');\n        angular.element(elements[1]).next().removeClass('validation-error'); //Show only one error.\n        elements[1].focus();\n        return;\n      }\n\n      var upload_obj = {consultFormName: qna.consultFormName, patientName: patient.name, \n        patientAge: patient.age, patientCountryCode: patient.countryCode,\n        patientSex: patient.sex, patientPhone: patient.phoneNumber, questions: qna.questions}; //patientEmail: patient.email,\n      ConsultFormsServices.uploadForm(upload_obj).$promise.then(function(data) {\n        oneHealthToast.show($scope.gMsgs.post_record_save);\n        $state.go('patientrecordlist', {patient: patient});\n      });\n    };\n\n    $scope.skip = function() {\n      oneHealthToast.show($scope.gMsgs.post_record_cancel);\n      $state.go('patientrecordlist', {patient: $scope.patient});\n    };\n\n    //This might not be needed at the moment as .list() returns the questions[] too.\n    //ConsultFormsServices.getForm({id: consultFormId})\n\n  }]);\n\noneHpControllers.controller('PatientListCtrl', [\n  '$scope', '$state', '$stateParams', 'ConsultFormsServices',\n  function($scope, $state, $stateParams, ConsultFormsServices) {\n\n    ConsultFormsServices.listPatientRecords().$promise.then(function(data) {\n      $scope.prs = data;\n    })\n\n    $scope.patientrecordlist = function(pr) {\n\n      var patient = {\n        name : pr.consultforms[0].patientName,\n        countryCode: pr.consultforms[0].patientCountryCode, phoneNumber : pr.patientPhone,\n        sex: pr.consultforms[0].patientSex, age: pr.consultforms[0].patientAge\n      };\n      $state.go('patientrecordlist', {patient: patient, consultforms: pr.consultforms});\n    };\n  }]);\n\noneHpControllers.controller('PatientRecordsListCtrl', [\n  '$scope', '$state', '$stateParams', 'ConsultFormsServices', 'ModalService',\n  function($scope, $state, $stateParams, ConsultFormsServices, ModalService) {\n\n    $scope.patient = $stateParams.patient;\n    $scope.consultforms = $stateParams.consultforms;\n\n    console.log($scope.patient);\n\n    if ($scope.patient == null) {\n      $state.go('patientslist');\n      return;\n    }\n    if ($scope.consultforms == null) {\n      ConsultFormsServices.listPatientRecords({patientPhone: $scope.patient.phoneNumber}).$promise.then(function(data) {\n        console.log (data);\n        try {\n          $scope.consultforms = data[0].consultforms;\n        } catch(err) {\n          $scope.consultforms = [];\n        }\n      });\n    }\n\n    $scope.addconsultform = function() {\n      $state.go('consultforms', {patient: $scope.patient});\n    }\n\n    $scope.showRecord = function(r) {\n      ModalService.showModal({\n        templateUrl: \"partials/patientrecord-view-modal.html\",\n        controller: \"PatientRecordViewModalCtrl\",\n        inputs: {record : r}\n      }).then(function(modal) {\n        modal.close.then(function(result) {\n\n        });\n      });\n    };\n\n    $scope.timeHumanize = function(date) {\n      try {\n        return moment.duration(moment().diff(date)).humanize();\n      } catch(err) {\n        return \"\";\n      }\n    };\n\n  }]);\n\noneHpControllers.controller('PatientRecordViewModalCtrl', ['$scope', 'close', 'record', 'ConsultFormsServices',\n  function($scope, close, record, ConsultFormsServices) {\n\n    $scope.record = record;\n    $scope.activeNetwork = true;\n\n    ConsultFormsServices.getPatientRecords({id: $scope.record.recordId}).$promise.then(function(data) {\n      $scope.questions = data.questions;\n      $scope.activeNetwork = false;\n    });\n\n    $scope.close = function() {\n      close();\n    };\n\n  }]);\n\n","'use strict';\n\n/* Directives */\n\nvar oneHpApp = angular.module('oneHpApp');\n\nfunction getWeekDays(start) {\n  var weekdays = [];\n  for (var i = start.clone().startOf('week'); i <= start.clone().endOf('week'); i.add(1, 'day')) {\n    weekdays.push({date: i.clone()});\n  }\n  return weekdays;\n};\n\nfunction getWeeks(date) {\n  var day = date.clone().startOf('month');\n  var endOfMonth = date.clone().endOf('month');\n  var weeks = [];\n\n  while(day <= endOfMonth) {\n    var startOfWeek = day.clone();\n        var endOfWeek = day.endOf('week') < endOfMonth ? day.endOf('week') : endOfMonth;\n        weeks.push(getWeekDays(startOfWeek.clone(), endOfWeek.clone()));\n        day.add(1, 'day');\n  }\n  return weeks;\n}\n\noneHpApp.directive('calendar', function() {\n  return {\n    restrict: 'AE',\n    scope: {\n      onSelectDate: '=',\n      loadSummary: '=',\n      summary: '=',\n      cancelAll: '=',\n      blockDay: '=',\n      unblockDay: '=',\n      addEvent: '='\n    },\n    templateUrl: 'partials/rcalendar/calendar.html',\n    link: function(scope, element, attrs, ctrls) {\n      scope.nextMonth = function() {\n        scope.currentDate.startOf('month').add(1, 'months');\n      };\n\n      scope.previousMonth = function() {\n        scope.currentDate.startOf('month').subtract(1, 'months');\n      };\n\n      scope.$watch('currentDate.month()', function(oldValue, newValue){\n        scope.weeks = getWeeks(scope.currentDate);\n        scope.loadSummary(scope.currentDate);\n      });\n\n      scope.$watch('currentDate', function(oldValue, newValue){\n        scope.weeks = getWeeks(scope.currentDate);\n        scope.onSelectDate(scope.currentDate);\n      });\n      scope.currentDate = moment();\n\n      scope.selectDay = function(date) {\n        var diff = scope.currentDate.clone().startOf('day').diff(date);\n        if ((diff === 0 && !scope.showControls) || (diff != 0)) {\n          scope.showControls = true;\n        } else {\n          scope.showControls = false;\n        }\n        scope.currentDate = date;\n      };\n\n      scope.hasEvents = function(date) {\n        try {\n          return scope.summary[date.month()+1][date.date()].hasEvents;\n        } catch (e) {\n          return false;\n        }\n      };\n\n      scope.isBlocked = function(date) {\n        try {\n          return scope.summary[date.month()+1][date.date()].blocked;\n        } catch (e) {\n          return false;\n        }\n      };\n\n    }\n  };\n});\n\noneHpApp.directive('menuControl', [function() {\n  return {\n    restrict: 'A',\n    controller: function($scope) {\n      this.show = function() {\n        $scope.show = true;\n      };\n      this.hide = function() {\n        $scope.show = false;\n      };\n      $scope.hide = this.hide;\n    }\n  };\n}]);\n\noneHpApp.directive('menu', [function() {\n  return {\n    restrict: 'E',\n    templateUrl: 'partials/menu.html',\n    require: '^^menuControl'\n  };\n}]);\n\noneHpApp.directive('menuToggle', [function() {\n  return {\n    restrict: 'A',\n    require: '^^menuControl',\n    scope: true,\n    link: function(scope, element, attrs, menuControlCtrl) {\n      element.on('click', function(e) {\n        e.preventDefault();\n        menuControlCtrl.show();\n        scope.$apply();\n      });\n    }\n  };\n}]);\n\noneHpApp.directive(\"filepicker\",function(){\n    return{\n      restrict: 'A',\n      link: function (scope, element, attrs) {\n        (function(a) {\n          if(window.filepicker) {\n            return;\n          }\n          var b=a.createElement(\"script\");\n          b.type=\"text/javascript\";\n          b.async=!0;\n          b.src=(\"https:\"===a.location.protocol?\"https:\":\"http:\")+\"//api.filepicker.io/v1/filepicker.js\";\n          var c=a.getElementsByTagName(\"script\")[0];\n          c.parentNode.insertBefore(b,c);\n          var d={};\n          d._queue=[];\n          var e=\"pick,pickMultiple,pickAndStore,read,write,writeUrl,export,convert,store,storeUrl,remove,stat,setKey,constructWidget,makeDropPane\".split(\",\");\n          \n          var f=function(a,b) {\n            return function() {\n              b.push([a,arguments]);\n            };\n          };\n          \n          for(var g=0;g<e.length;g++) {\n            d[e[g]]=f(e[g],d._queue);\n          }\n          window.filepicker=d;\n        })(document);\n        \n        //filepicker.setKey('AFIfKsctjSjS7vT6kAzEgz');//riteshiitbbs@gmail.com/tricon\n        filepicker.setKey('AVAlGtDM8ROudMAtXBHDSz');//prashantnaik@gmail.com/123456\n        //filepicker.setKey('AMfJlBtH6RHWPiaNaVhO6z');//Arun's credentials\n        \n        window.conversions = {\n          'origin': {},\n          'mythumb': {\n            'w': 200,\n            'format': 'jpg'\n          }\n        };\n        \n      }\n    };\n  });\n","var oneHpApp = angular.module('oneHpApp');\n\noneHpApp.config(function($stateProvider, $urlRouterProvider) {\n  $urlRouterProvider.otherwise('/splash');\n  $stateProvider.\n  state('splash', {\n    url: '/splash',\n    templateUrl: 'partials/splash.html',\n    controller: 'SplashCtrl'\n  }).\n  state('login', {\n    url: '/login',\n    templateUrl: 'partials/login.html',\n    controller: 'LoginCtrl'\n  }).\n  state('dashboard', {\n    url: '/dashboard',\n    templateUrl: 'partials/dashboard.html',\n    controller: 'DashboardCtrl',\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('profile', {\n    url: '/profile',\n    templateUrl: 'partials/profile.html',\n    controller: 'ProfileCtrl',\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('calendar', {\n    url: '/calendar',\n    templateUrl: 'partials/calendar.html',\n    controller: 'CalendarCtrl',\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('consultforms', {\n    url: '/consultforms',\n    templateUrl: 'partials/consultforms-list.html',\n    controller: 'ConsultFormsListCtrl',\n    params: {patient: null},\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('consultformsfill', {\n    url: '/consultforms/fill',\n    templateUrl: 'partials/consultforms-fill.html',\n    controller: 'ConsultFormsFillCtrl',\n    params: {cf: null, patient: null},\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('consultformsview', {\n    url: '/consultforms/view/:id',\n    templateUrl: 'partials/consultforms-view.html',\n    controller: 'ConsultFormsViewCtrl',\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('patientslist', {\n    url: '/patients/list',\n    templateUrl: 'partials/patients-list.html',\n    controller: 'PatientListCtrl',\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('patientrecordlist', {\n    url: '/patientrecord/list',\n    templateUrl: 'partials/patientrecords-list.html',\n    controller: 'PatientRecordsListCtrl',\n    params: {patient: null, consultforms: null},\n    resolve: {isLoggedIn: isLoggedIn}\n  }).\n  state('logout', {\n    url: '/logout',\n    templateUrl: 'partials/login.html',\n    controller: 'LogoutCtrl'\n  })\n});\n","var oneHpServices = angular.module('oneHpServices', ['ngResource']);\n\noneHpServices.factory('Login', ['$resource',\n  function($resource) {\n    return $resource(serverUrl + '/1hp/accesscode', {}, {\n      getAccessCode: {\n        method: 'POST',\n        url: serverUrl + '/1hp/accesscode'\n      },\n      validateOtp: {\n        method: 'POST',\n        url: serverUrl + '/1hp/validate'\n      },\n      callToGetOTP: {\n        method: 'POST',\n        url: serverUrl + '/1hp/otpbycall'\n      }\n    });\n  }]);\n\noneHpServices.factory('Event', ['$resource',\n  function($resource) {\n    return $resource(serverUrl + '/1hp/calendar/event/list', {}, {\n      getEvents: {\n        method: 'GET',\n        url: serverUrl + '/1hp/calendar/event/list?start=:start&end=:end',\n        isArray: true\n      },\n      add: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/event/add'\n      },\n      complete: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/event/complete'\n      },\n      cancel: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/event/cancel'\n      },\n      noshow: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/event/noshow'\n      },\n      update: {\n        method: 'PUT',\n        url: serverUrl + '/1hp/calendar/event/edit'\n      },\n      summary: {\n        method: 'GET',\n        url: serverUrl + '/1hp/calendar/event/summary?start=:start&end=:end',\n        isArray: true\n      },\n      block: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/block'\n      },\n      unblock: {\n        method: 'POST',\n        url: serverUrl + '/1hp/calendar/unblock'\n      }\n    });\n  }]);\n\noneHpServices.factory('countryCode', [\n  '$resource',\n  function($resource) {\n    return $resource('json/country-code.json');\n  }]);\n\noneHpServices.factory('dataUpload', ['$window', function($window) {\n  var fileUpload = {\n    pick : function(options, callback) {\n      filepicker.pick(options,function (InkBlob) {\n        callback && callback(InkBlob);\n      });\n    },\n    store : function(imageDATA, callback) {\n      filepicker.store(imageDATA, {\n        mimetype: 'image/jpeg',\n        filename: '1hf-' + (new Date()).getTime(),\n        base64decode: true,\n        Location: 'S3'\n      }, function(InkBlob) {\n        callback && callback(InkBlob);\n      }, function(FPError) {\n        //alert($scope.localeMessages[\"message.uploadRecords.errorUpload\"]);\n      }, function(progress) {\n        //alert(progress + \"% uploaded\");\n      });\n    },\n    remove : function(object, callback) {\n      filepicker.remove(object,\n                        function() {\n                          console.log(\"Removed\");\n                          callback && callback();\n                        },function(FPError) {\n                          console.log(FPError);\n                        });\n    }\n  };\n  return fileUpload;\n}]);\n\noneHpServices.service(\"documentUploader\",\n  [\"$q\", \"$cordovaCamera\", \"dataUpload\",\n  function ($q, $cordovaCamera, dataUpload) {\n\n    var default_options = {\n      quality: 50,\n      destinationType: Camera.DestinationType.DATA_URL,\n      //sourceType: Camera.PictureSourceType.SAVEDPHOTOALBUM, //Camera.PictureSourceType.CAMERA,\n      //correctOrientation: true,\n      allowEdit: true,\n      encodingType: Camera.EncodingType.JPEG,\n      targetWidth: 800,\n      targetHeight: 600,\n      popoverOptions: CameraPopoverOptions,\n      saveToPhotoAlbum: false\n    };\n\n    var upload = function (src, override_options) {\n      var options = angular.extend({}, default_options, override_options);\n      var deffered = $q.defer();\n      if (src == \"camera\")\n        options['sourceType'] = Camera.PictureSourceType.CAMERA;\n      else\n        options['sourceType'] = Camera.PictureSourceType.SAVEDPHOTOALBUM;\n\n      $cordovaCamera.getPicture(options)\n        .then(function(imageData) {\n                dataUpload.store(imageData, function(object) {\n                                              deffered.resolve(object);\n                                            },\n                                            function (error) {\n                                              console.log(error);\n                                              deffered.reject();\n                                            });\n              },\n              function(error) {\n                deffered.reject();\n              });\n      return deffered.promise;\n    };\n\n    return {upload: upload};\n  }]);\n\n\n/* Profile */\noneHpServices.factory('Profile', ['$resource',\n  function($resource) {\n    return $resource(serverUrl + '/1hp/practitioners', {}, {\n      getProfile: {\n        method: 'GET'\n      },\n      updateProfile: {\n          method: 'PUT',\n          url: serverUrl + '/1hp/practitioners'\n        }\n      });\n  }]);\n\n/* Auth services */\noneHpServices.factory('LoginServices', ['$resource',\n  function($resource) {\n    console.log(\"inside\");\n    return $resource(serverUrl + '/1hp/logout', {}, {\n      logout: {\n        method: 'POST',\n        url: serverUrl + '/1hp/logout',\n      }\n    });\n  }]);\n\noneHpServices.factory('ConsultFormsServices', ['$resource',\n  function($resource) {\n    return $resource(serverUrl + '/1hp/consultforms', {}, {\n      list: {\n        method: 'GET',\n        url: serverUrl + '/1hp/consultforms',\n        isArray: true\n      },\n      getForm: {\n        method: 'GET',\n        url: serverUrl + '/1hp/consultforms/questions/:id'\n      },\n      uploadForm: {\n        method: 'POST',\n        url: serverUrl + '/1hp/patient/records'\n      },\n      listPatientRecords : {\n        method: 'GET',\n        url: serverUrl + '/1hp/patient/records',\n        isArray: true\n      },\n      getPatientRecords : {\n        method: 'GET',\n        url: serverUrl + '/1hp/patient/records/:id'\n      }\n    });\n  }]);\n\n/*\n * Wrapper for $cordovaToast. As sometimes, direct usage is disrupting browser flow. \n */\noneHpServices.service(\"oneHealthToast\",\n  [\"$rootScope\", \"$q\", \"$cordovaToast\",\n  function ($rootScope, $q, $cordovaToast) {\n    var show = function(message) {\n      try{\n        $cordovaToast.show (message, \"long\", \"center\");\n      } catch(err) {\n        console.log(\"toast: \", message);\n      }\n    };\n\n    return {show: show};\n  }]);\n\noneHpServices.factory('localeMessages', ['$resource',\n  function($resource) {\n    return $resource('locale/messages.json', {}, {query:{isArray:false}});\n  }]);\n"]}